/**
 *
 *  Userdata.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Userdata.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::educloud;

const std::string Userdata::Cols::_UserId = "\"UserId\"";
const std::string Userdata::Cols::_Email = "\"Email\"";
const std::string Userdata::Cols::_BirthDate = "\"BirthDate\"";
const std::string Userdata::primaryKeyName = "UserId";
const bool Userdata::hasPrimaryKey = true;
const std::string Userdata::tableName = "\"UserData\"";

const std::vector<typename Userdata::MetaData> Userdata::metaData_={
{"UserId","std::string","uuid",0,0,1,1},
{"Email","std::string","character varying",0,0,0,0},
{"BirthDate","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &Userdata::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Userdata::Userdata(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["UserId"].isNull())
        {
            userid_=std::make_shared<std::string>(r["UserId"].as<std::string>());
        }
        if(!r["Email"].isNull())
        {
            email_=std::make_shared<std::string>(r["Email"].as<std::string>());
        }
        if(!r["BirthDate"].isNull())
        {
            auto timeStr = r["BirthDate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Userdata::Userdata(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Userdata::Userdata(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("UserId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["UserId"].isNull())
        {
            userid_=std::make_shared<std::string>(pJson["UserId"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("BirthDate"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["BirthDate"].isNull())
        {
            auto timeStr = pJson["BirthDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Userdata::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Userdata::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("UserId"))
    {
        if(!pJson["UserId"].isNull())
        {
            userid_=std::make_shared<std::string>(pJson["UserId"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("BirthDate"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["BirthDate"].isNull())
        {
            auto timeStr = pJson["BirthDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const std::string &Userdata::getValueOfUserid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Userdata::getUserid() const noexcept
{
    return userid_;
}
void Userdata::setUserid(const std::string &pUserid) noexcept
{
    userid_ = std::make_shared<std::string>(pUserid);
    dirtyFlag_[0] = true;
}
void Userdata::setUserid(std::string &&pUserid) noexcept
{
    userid_ = std::make_shared<std::string>(std::move(pUserid));
    dirtyFlag_[0] = true;
}
const typename Userdata::PrimaryKeyType & Userdata::getPrimaryKey() const
{
    assert(userid_);
    return *userid_;
}

const std::string &Userdata::getValueOfEmail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Userdata::getEmail() const noexcept
{
    return email_;
}
void Userdata::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[1] = true;
}
void Userdata::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[1] = true;
}
void Userdata::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Userdata::getValueOfBirthdate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(birthdate_)
        return *birthdate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Userdata::getBirthdate() const noexcept
{
    return birthdate_;
}
void Userdata::setBirthdate(const ::trantor::Date &pBirthdate) noexcept
{
    birthdate_ = std::make_shared<::trantor::Date>(pBirthdate);
    dirtyFlag_[2] = true;
}

void Userdata::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Userdata::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "UserId",
        "Email",
        "BirthDate"
    };
    return inCols;
}

void Userdata::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBirthdate())
        {
            binder << getValueOfBirthdate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Userdata::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Userdata::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBirthdate())
        {
            binder << getValueOfBirthdate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Userdata::toJson() const
{
    Json::Value ret;
    if(getUserid())
    {
        ret["UserId"]=getValueOfUserid();
    }
    else
    {
        ret["UserId"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getBirthdate())
    {
        ret["BirthDate"]=getBirthdate()->toDbStringLocal();
    }
    else
    {
        ret["BirthDate"]=Json::Value();
    }
    return ret;
}

Json::Value Userdata::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[1]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getBirthdate())
            {
                ret[pMasqueradingVector[2]]=getBirthdate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserid())
    {
        ret["UserId"]=getValueOfUserid();
    }
    else
    {
        ret["UserId"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getBirthdate())
    {
        ret["BirthDate"]=getBirthdate()->toDbStringLocal();
    }
    else
    {
        ret["BirthDate"]=Json::Value();
    }
    return ret;
}

bool Userdata::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("UserId"))
    {
        if(!validJsonOfField(0, "UserId", pJson["UserId"], err, true))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(1, "Email", pJson["Email"], err, true))
            return false;
    }
    if(pJson.isMember("BirthDate"))
    {
        if(!validJsonOfField(2, "BirthDate", pJson["BirthDate"], err, true))
            return false;
    }
    else
    {
        err="The BirthDate column cannot be null";
        return false;
    }
    return true;
}
bool Userdata::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Userdata::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("UserId"))
    {
        if(!validJsonOfField(0, "UserId", pJson["UserId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(1, "Email", pJson["Email"], err, false))
            return false;
    }
    if(pJson.isMember("BirthDate"))
    {
        if(!validJsonOfField(2, "BirthDate", pJson["BirthDate"], err, false))
            return false;
    }
    return true;
}
bool Userdata::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Userdata::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

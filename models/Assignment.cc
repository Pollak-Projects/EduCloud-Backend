/**
 *
 *  Assignment.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Assignment.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::educloud;

const std::string Assignment::Cols::_Id = "\"Id\"";
const std::string Assignment::Cols::_Name = "\"Name\"";
const std::string Assignment::Cols::_Content = "\"Content\"";
const std::string Assignment::Cols::_Grade = "\"Grade\"";
const std::string Assignment::Cols::_Description = "\"Description\"";
const std::string Assignment::Cols::_CreatedAt = "\"CreatedAt\"";
const std::string Assignment::Cols::_UpdatedAt = "\"UpdatedAt\"";
const std::string Assignment::Cols::_CategoryId = "\"CategoryId\"";
const std::string Assignment::Cols::_ProfessionId = "\"ProfessionId\"";
const std::string Assignment::primaryKeyName = "Id";
const bool Assignment::hasPrimaryKey = true;
const std::string Assignment::tableName = "\"Assignment\"";

const std::vector<typename Assignment::MetaData> Assignment::metaData_={
{"Id","std::string","uuid",0,0,1,1},
{"Name","std::string","character varying",0,0,0,1},
{"Content","std::string","text",0,0,0,0},
{"Grade","std::string","character varying",0,0,0,0},
{"Description","std::string","text",0,0,0,0},
{"CreatedAt","::trantor::Date","timestamp without time zone",0,0,0,0},
{"UpdatedAt","::trantor::Date","timestamp without time zone",0,0,0,0},
{"CategoryId","std::string","uuid",0,0,0,0},
{"ProfessionId","std::string","uuid",0,0,0,0}
};
const std::string &Assignment::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Assignment::Assignment(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<std::string>(r["Id"].as<std::string>());
        }
        if(!r["Name"].isNull())
        {
            name_=std::make_shared<std::string>(r["Name"].as<std::string>());
        }
        if(!r["Content"].isNull())
        {
            content_=std::make_shared<std::string>(r["Content"].as<std::string>());
        }
        if(!r["Grade"].isNull())
        {
            grade_=std::make_shared<std::string>(r["Grade"].as<std::string>());
        }
        if(!r["Description"].isNull())
        {
            description_=std::make_shared<std::string>(r["Description"].as<std::string>());
        }
        if(!r["CreatedAt"].isNull())
        {
            auto timeStr = r["CreatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["UpdatedAt"].isNull())
        {
            auto timeStr = r["UpdatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["CategoryId"].isNull())
        {
            categoryid_=std::make_shared<std::string>(r["CategoryId"].as<std::string>());
        }
        if(!r["ProfessionId"].isNull())
        {
            professionid_=std::make_shared<std::string>(r["ProfessionId"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            grade_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            categoryid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            professionid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Assignment::Assignment(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            grade_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            categoryid_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            professionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Assignment::Assignment(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["Id"].asString());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Content"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["Content"].asString());
        }
    }
    if(pJson.isMember("Grade"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Grade"].isNull())
        {
            grade_=std::make_shared<std::string>(pJson["Grade"].asString());
        }
    }
    if(pJson.isMember("Description"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["Description"].asString());
        }
    }
    if(pJson.isMember("CreatedAt"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["CreatedAt"].isNull())
        {
            auto timeStr = pJson["CreatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("UpdatedAt"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["UpdatedAt"].isNull())
        {
            auto timeStr = pJson["UpdatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CategoryId"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["CategoryId"].isNull())
        {
            categoryid_=std::make_shared<std::string>(pJson["CategoryId"].asString());
        }
    }
    if(pJson.isMember("ProfessionId"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["ProfessionId"].isNull())
        {
            professionid_=std::make_shared<std::string>(pJson["ProfessionId"].asString());
        }
    }
}

void Assignment::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            grade_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            categoryid_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            professionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

void Assignment::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["Id"].asString());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Content"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["Content"].asString());
        }
    }
    if(pJson.isMember("Grade"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Grade"].isNull())
        {
            grade_=std::make_shared<std::string>(pJson["Grade"].asString());
        }
    }
    if(pJson.isMember("Description"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["Description"].asString());
        }
    }
    if(pJson.isMember("CreatedAt"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["CreatedAt"].isNull())
        {
            auto timeStr = pJson["CreatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("UpdatedAt"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["UpdatedAt"].isNull())
        {
            auto timeStr = pJson["UpdatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CategoryId"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["CategoryId"].isNull())
        {
            categoryid_=std::make_shared<std::string>(pJson["CategoryId"].asString());
        }
    }
    if(pJson.isMember("ProfessionId"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["ProfessionId"].isNull())
        {
            professionid_=std::make_shared<std::string>(pJson["ProfessionId"].asString());
        }
    }
}

const std::string &Assignment::getValueOfId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getId() const noexcept
{
    return id_;
}
void Assignment::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Assignment::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Assignment::PrimaryKeyType & Assignment::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Assignment::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getName() const noexcept
{
    return name_;
}
void Assignment::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Assignment::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &Assignment::getValueOfContent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getContent() const noexcept
{
    return content_;
}
void Assignment::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[2] = true;
}
void Assignment::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[2] = true;
}
void Assignment::setContentToNull() noexcept
{
    content_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Assignment::getValueOfGrade() const noexcept
{
    static const std::string defaultValue = std::string();
    if(grade_)
        return *grade_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getGrade() const noexcept
{
    return grade_;
}
void Assignment::setGrade(const std::string &pGrade) noexcept
{
    grade_ = std::make_shared<std::string>(pGrade);
    dirtyFlag_[3] = true;
}
void Assignment::setGrade(std::string &&pGrade) noexcept
{
    grade_ = std::make_shared<std::string>(std::move(pGrade));
    dirtyFlag_[3] = true;
}
void Assignment::setGradeToNull() noexcept
{
    grade_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Assignment::getValueOfDescription() const noexcept
{
    static const std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getDescription() const noexcept
{
    return description_;
}
void Assignment::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[4] = true;
}
void Assignment::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[4] = true;
}
void Assignment::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Assignment::getValueOfCreatedat() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Assignment::getCreatedat() const noexcept
{
    return createdat_;
}
void Assignment::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[5] = true;
}
void Assignment::setCreatedatToNull() noexcept
{
    createdat_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Assignment::getValueOfUpdatedat() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Assignment::getUpdatedat() const noexcept
{
    return updatedat_;
}
void Assignment::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[6] = true;
}
void Assignment::setUpdatedatToNull() noexcept
{
    updatedat_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Assignment::getValueOfCategoryid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(categoryid_)
        return *categoryid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getCategoryid() const noexcept
{
    return categoryid_;
}
void Assignment::setCategoryid(const std::string &pCategoryid) noexcept
{
    categoryid_ = std::make_shared<std::string>(pCategoryid);
    dirtyFlag_[7] = true;
}
void Assignment::setCategoryid(std::string &&pCategoryid) noexcept
{
    categoryid_ = std::make_shared<std::string>(std::move(pCategoryid));
    dirtyFlag_[7] = true;
}
void Assignment::setCategoryidToNull() noexcept
{
    categoryid_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Assignment::getValueOfProfessionid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(professionid_)
        return *professionid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Assignment::getProfessionid() const noexcept
{
    return professionid_;
}
void Assignment::setProfessionid(const std::string &pProfessionid) noexcept
{
    professionid_ = std::make_shared<std::string>(pProfessionid);
    dirtyFlag_[8] = true;
}
void Assignment::setProfessionid(std::string &&pProfessionid) noexcept
{
    professionid_ = std::make_shared<std::string>(std::move(pProfessionid));
    dirtyFlag_[8] = true;
}
void Assignment::setProfessionidToNull() noexcept
{
    professionid_.reset();
    dirtyFlag_[8] = true;
}

void Assignment::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Assignment::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "Name",
        "Content",
        "Grade",
        "Description",
        "CreatedAt",
        "UpdatedAt",
        "CategoryId",
        "ProfessionId"
    };
    return inCols;
}

void Assignment::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGrade())
        {
            binder << getValueOfGrade();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCategoryid())
        {
            binder << getValueOfCategoryid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getProfessionid())
        {
            binder << getValueOfProfessionid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Assignment::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Assignment::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGrade())
        {
            binder << getValueOfGrade();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCategoryid())
        {
            binder << getValueOfCategoryid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getProfessionid())
        {
            binder << getValueOfProfessionid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Assignment::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getContent())
    {
        ret["Content"]=getValueOfContent();
    }
    else
    {
        ret["Content"]=Json::Value();
    }
    if(getGrade())
    {
        ret["Grade"]=getValueOfGrade();
    }
    else
    {
        ret["Grade"]=Json::Value();
    }
    if(getDescription())
    {
        ret["Description"]=getValueOfDescription();
    }
    else
    {
        ret["Description"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["CreatedAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["CreatedAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["UpdatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["UpdatedAt"]=Json::Value();
    }
    if(getCategoryid())
    {
        ret["CategoryId"]=getValueOfCategoryid();
    }
    else
    {
        ret["CategoryId"]=Json::Value();
    }
    if(getProfessionid())
    {
        ret["ProfessionId"]=getValueOfProfessionid();
    }
    else
    {
        ret["ProfessionId"]=Json::Value();
    }
    return ret;
}

Json::Value Assignment::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[2]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getGrade())
            {
                ret[pMasqueradingVector[3]]=getValueOfGrade();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[4]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[5]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[6]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCategoryid())
            {
                ret[pMasqueradingVector[7]]=getValueOfCategoryid();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getProfessionid())
            {
                ret[pMasqueradingVector[8]]=getValueOfProfessionid();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getContent())
    {
        ret["Content"]=getValueOfContent();
    }
    else
    {
        ret["Content"]=Json::Value();
    }
    if(getGrade())
    {
        ret["Grade"]=getValueOfGrade();
    }
    else
    {
        ret["Grade"]=Json::Value();
    }
    if(getDescription())
    {
        ret["Description"]=getValueOfDescription();
    }
    else
    {
        ret["Description"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["CreatedAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["CreatedAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["UpdatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["UpdatedAt"]=Json::Value();
    }
    if(getCategoryid())
    {
        ret["CategoryId"]=getValueOfCategoryid();
    }
    else
    {
        ret["CategoryId"]=Json::Value();
    }
    if(getProfessionid())
    {
        ret["ProfessionId"]=getValueOfProfessionid();
    }
    else
    {
        ret["ProfessionId"]=Json::Value();
    }
    return ret;
}

bool Assignment::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, true))
            return false;
    }
    else
    {
        err="The Name column cannot be null";
        return false;
    }
    if(pJson.isMember("Content"))
    {
        if(!validJsonOfField(2, "Content", pJson["Content"], err, true))
            return false;
    }
    if(pJson.isMember("Grade"))
    {
        if(!validJsonOfField(3, "Grade", pJson["Grade"], err, true))
            return false;
    }
    if(pJson.isMember("Description"))
    {
        if(!validJsonOfField(4, "Description", pJson["Description"], err, true))
            return false;
    }
    if(pJson.isMember("CreatedAt"))
    {
        if(!validJsonOfField(5, "CreatedAt", pJson["CreatedAt"], err, true))
            return false;
    }
    if(pJson.isMember("UpdatedAt"))
    {
        if(!validJsonOfField(6, "UpdatedAt", pJson["UpdatedAt"], err, true))
            return false;
    }
    if(pJson.isMember("CategoryId"))
    {
        if(!validJsonOfField(7, "CategoryId", pJson["CategoryId"], err, true))
            return false;
    }
    if(pJson.isMember("ProfessionId"))
    {
        if(!validJsonOfField(8, "ProfessionId", pJson["ProfessionId"], err, true))
            return false;
    }
    return true;
}
bool Assignment::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Assignment::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, false))
            return false;
    }
    if(pJson.isMember("Content"))
    {
        if(!validJsonOfField(2, "Content", pJson["Content"], err, false))
            return false;
    }
    if(pJson.isMember("Grade"))
    {
        if(!validJsonOfField(3, "Grade", pJson["Grade"], err, false))
            return false;
    }
    if(pJson.isMember("Description"))
    {
        if(!validJsonOfField(4, "Description", pJson["Description"], err, false))
            return false;
    }
    if(pJson.isMember("CreatedAt"))
    {
        if(!validJsonOfField(5, "CreatedAt", pJson["CreatedAt"], err, false))
            return false;
    }
    if(pJson.isMember("UpdatedAt"))
    {
        if(!validJsonOfField(6, "UpdatedAt", pJson["UpdatedAt"], err, false))
            return false;
    }
    if(pJson.isMember("CategoryId"))
    {
        if(!validJsonOfField(7, "CategoryId", pJson["CategoryId"], err, false))
            return false;
    }
    if(pJson.isMember("ProfessionId"))
    {
        if(!validJsonOfField(8, "ProfessionId", pJson["ProfessionId"], err, false))
            return false;
    }
    return true;
}
bool Assignment::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Assignment::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

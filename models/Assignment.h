/**
 *
 *  Assignment.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace educloud
{
class Category;
class Grade;
class Profession;
class Teacherassignment;

class Assignment
{
  public:
    struct Cols
    {
        static const std::string _Id;
        static const std::string _Name;
        static const std::string _Content;
        static const std::string _Description;
        static const std::string _CreatedAt;
        static const std::string _UpdatedAt;
        static const std::string _GradeId;
        static const std::string _CategoryId;
        static const std::string _ProfessionId;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = std::string;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Assignment(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Assignment(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Assignment(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Assignment() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column Id  */
    ///Get the value of the column Id, returns the default value if the column is null
    const std::string &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getId() const noexcept;
    ///Set the value of the column Id
    void setId(const std::string &pId) noexcept;
    void setId(std::string &&pId) noexcept;

    /**  For column Name  */
    ///Get the value of the column Name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column Name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;

    /**  For column Content  */
    ///Get the value of the column Content, returns the default value if the column is null
    const std::string &getValueOfContent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getContent() const noexcept;
    ///Set the value of the column Content
    void setContent(const std::string &pContent) noexcept;
    void setContent(std::string &&pContent) noexcept;
    void setContentToNull() noexcept;

    /**  For column Description  */
    ///Get the value of the column Description, returns the default value if the column is null
    const std::string &getValueOfDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDescription() const noexcept;
    ///Set the value of the column Description
    void setDescription(const std::string &pDescription) noexcept;
    void setDescription(std::string &&pDescription) noexcept;
    void setDescriptionToNull() noexcept;

    /**  For column CreatedAt  */
    ///Get the value of the column CreatedAt, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedat() const noexcept;
    ///Set the value of the column CreatedAt
    void setCreatedat(const ::trantor::Date &pCreatedat) noexcept;
    void setCreatedatToNull() noexcept;

    /**  For column UpdatedAt  */
    ///Get the value of the column UpdatedAt, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedat() const noexcept;
    ///Set the value of the column UpdatedAt
    void setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept;
    void setUpdatedatToNull() noexcept;

    /**  For column GradeId  */
    ///Get the value of the column GradeId, returns the default value if the column is null
    const std::string &getValueOfGradeid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGradeid() const noexcept;
    ///Set the value of the column GradeId
    void setGradeid(const std::string &pGradeid) noexcept;
    void setGradeid(std::string &&pGradeid) noexcept;
    void setGradeidToNull() noexcept;

    /**  For column CategoryId  */
    ///Get the value of the column CategoryId, returns the default value if the column is null
    const std::string &getValueOfCategoryid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCategoryid() const noexcept;
    ///Set the value of the column CategoryId
    void setCategoryid(const std::string &pCategoryid) noexcept;
    void setCategoryid(std::string &&pCategoryid) noexcept;
    void setCategoryidToNull() noexcept;

    /**  For column ProfessionId  */
    ///Get the value of the column ProfessionId, returns the default value if the column is null
    const std::string &getValueOfProfessionid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProfessionid() const noexcept;
    ///Set the value of the column ProfessionId
    void setProfessionid(const std::string &pProfessionid) noexcept;
    void setProfessionid(std::string &&pProfessionid) noexcept;
    void setProfessionidToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 9;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Teacherassignment getTeacherassignment(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTeacherassignment(const drogon::orm::DbClientPtr &clientPtr,
                              const std::function<void(Teacherassignment)> &rcb,
                              const drogon::orm::ExceptionCallback &ecb) const;
    Grade getGrade(const drogon::orm::DbClientPtr &clientPtr) const;
    void getGrade(const drogon::orm::DbClientPtr &clientPtr,
                  const std::function<void(Grade)> &rcb,
                  const drogon::orm::ExceptionCallback &ecb) const;
    Category getCategory(const drogon::orm::DbClientPtr &clientPtr) const;
    void getCategory(const drogon::orm::DbClientPtr &clientPtr,
                     const std::function<void(Category)> &rcb,
                     const drogon::orm::ExceptionCallback &ecb) const;
    Profession getProfession(const drogon::orm::DbClientPtr &clientPtr) const;
    void getProfession(const drogon::orm::DbClientPtr &clientPtr,
                       const std::function<void(Profession)> &rcb,
                       const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<Assignment>;
    friend drogon::orm::BaseBuilder<Assignment, true, true>;
    friend drogon::orm::BaseBuilder<Assignment, true, false>;
    friend drogon::orm::BaseBuilder<Assignment, false, true>;
    friend drogon::orm::BaseBuilder<Assignment, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Assignment>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<std::string> id_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> content_;
    std::shared_ptr<std::string> description_;
    std::shared_ptr<::trantor::Date> createdat_;
    std::shared_ptr<::trantor::Date> updatedat_;
    std::shared_ptr<std::string> gradeid_;
    std::shared_ptr<std::string> categoryid_;
    std::shared_ptr<std::string> professionid_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[9]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where Id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where Id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        sql += "Id,";
        ++parametersCount;
        if(!dirtyFlag_[0])
        {
            needSelection=true;
        }
        if(dirtyFlag_[1])
        {
            sql += "Name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "Content,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "Description,";
            ++parametersCount;
        }
        sql += "CreatedAt,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        sql += "UpdatedAt,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        if(dirtyFlag_[6])
        {
            sql += "GradeId,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "CategoryId,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "ProfessionId,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        if(dirtyFlag_[0])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace educloud
} // namespace drogon_model

/**
 *
 *  Teacheruser.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Teacheruser.h"
#include "Teacher.h"
#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::educloud;

const std::string Teacheruser::Cols::_TeacherId = "\"TeacherId\"";
const std::string Teacheruser::Cols::_UserId = "\"UserId\"";
const std::vector<std::string> Teacheruser::primaryKeyName = {"UserId","TeacherId"};
const bool Teacheruser::hasPrimaryKey = true;
const std::string Teacheruser::tableName = "\"TeacherUser\"";

const std::vector<typename Teacheruser::MetaData> Teacheruser::metaData_={
{"TeacherId","std::string","uuid",0,0,1,1},
{"UserId","std::string","uuid",0,0,1,1}
};
const std::string &Teacheruser::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Teacheruser::Teacheruser(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["TeacherId"].isNull())
        {
            teacherid_=std::make_shared<std::string>(r["TeacherId"].as<std::string>());
        }
        if(!r["UserId"].isNull())
        {
            userid_=std::make_shared<std::string>(r["UserId"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            teacherid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Teacheruser::Teacheruser(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            teacherid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

Teacheruser::Teacheruser(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("TeacherId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["TeacherId"].isNull())
        {
            teacherid_=std::make_shared<std::string>(pJson["TeacherId"].asString());
        }
    }
    if(pJson.isMember("UserId"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["UserId"].isNull())
        {
            userid_=std::make_shared<std::string>(pJson["UserId"].asString());
        }
    }
}

void Teacheruser::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            teacherid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void Teacheruser::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("TeacherId"))
    {
        if(!pJson["TeacherId"].isNull())
        {
            teacherid_=std::make_shared<std::string>(pJson["TeacherId"].asString());
        }
    }
    if(pJson.isMember("UserId"))
    {
        if(!pJson["UserId"].isNull())
        {
            userid_=std::make_shared<std::string>(pJson["UserId"].asString());
        }
    }
}

const std::string &Teacheruser::getValueOfTeacherid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(teacherid_)
        return *teacherid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacheruser::getTeacherid() const noexcept
{
    return teacherid_;
}
void Teacheruser::setTeacherid(const std::string &pTeacherid) noexcept
{
    teacherid_ = std::make_shared<std::string>(pTeacherid);
    dirtyFlag_[0] = true;
}
void Teacheruser::setTeacherid(std::string &&pTeacherid) noexcept
{
    teacherid_ = std::make_shared<std::string>(std::move(pTeacherid));
    dirtyFlag_[0] = true;
}

const std::string &Teacheruser::getValueOfUserid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacheruser::getUserid() const noexcept
{
    return userid_;
}
void Teacheruser::setUserid(const std::string &pUserid) noexcept
{
    userid_ = std::make_shared<std::string>(pUserid);
    dirtyFlag_[1] = true;
}
void Teacheruser::setUserid(std::string &&pUserid) noexcept
{
    userid_ = std::make_shared<std::string>(std::move(pUserid));
    dirtyFlag_[1] = true;
}

void Teacheruser::updateId(const uint64_t id)
{
}
typename Teacheruser::PrimaryKeyType Teacheruser::getPrimaryKey() const
{
    return std::make_tuple(*userid_,*teacherid_);
}

const std::vector<std::string> &Teacheruser::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "TeacherId",
        "UserId"
    };
    return inCols;
}

void Teacheruser::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTeacherid())
        {
            binder << getValueOfTeacherid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Teacheruser::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Teacheruser::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTeacherid())
        {
            binder << getValueOfTeacherid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Teacheruser::toJson() const
{
    Json::Value ret;
    if(getTeacherid())
    {
        ret["TeacherId"]=getValueOfTeacherid();
    }
    else
    {
        ret["TeacherId"]=Json::Value();
    }
    if(getUserid())
    {
        ret["UserId"]=getValueOfUserid();
    }
    else
    {
        ret["UserId"]=Json::Value();
    }
    return ret;
}

Json::Value Teacheruser::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTeacherid())
            {
                ret[pMasqueradingVector[0]]=getValueOfTeacherid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTeacherid())
    {
        ret["TeacherId"]=getValueOfTeacherid();
    }
    else
    {
        ret["TeacherId"]=Json::Value();
    }
    if(getUserid())
    {
        ret["UserId"]=getValueOfUserid();
    }
    else
    {
        ret["UserId"]=Json::Value();
    }
    return ret;
}

bool Teacheruser::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("TeacherId"))
    {
        if(!validJsonOfField(0, "TeacherId", pJson["TeacherId"], err, true))
            return false;
    }
    else
    {
        err="The TeacherId column cannot be null";
        return false;
    }
    if(pJson.isMember("UserId"))
    {
        if(!validJsonOfField(1, "UserId", pJson["UserId"], err, true))
            return false;
    }
    else
    {
        err="The UserId column cannot be null";
        return false;
    }
    return true;
}
bool Teacheruser::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Teacheruser::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("TeacherId"))
    {
        if(!validJsonOfField(0, "TeacherId", pJson["TeacherId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("UserId"))
    {
        if(!validJsonOfField(1, "UserId", pJson["UserId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Teacheruser::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Teacheruser::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
User Teacheruser::getUser(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from User where Id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userid_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return User(r[0]);
}

void Teacheruser::getUser(const DbClientPtr &clientPtr,
                          const std::function<void(User)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from User where Id = $1";
    *clientPtr << sql
               << *userid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
Teacher Teacheruser::getTeacher(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from Teacher where Id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *teacherid _ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Teacher(r[0]);
}

void Teacheruser::getTeacher(const DbClientPtr &clientPtr,
                             const std::function<void(Teacher)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from Teacher where Id = $1";
    *clientPtr << sql
               << *teacherid _
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Teacher(r[0]));
                    }
               }
               >> ecb;
}
